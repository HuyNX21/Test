LIST OF STL SORTING ALGORITHMS
	- Là các thuật tóan sắp xếp các container như vector list deque array
	1. sort: là thuật toán sắp xếp cực kì phổ biến, nó sắp xếp các phần tử theo thứ tự tăng dần 
		- Đối tượng sử dụng: vector, deque, array.
		- Systax: std::sort(iterator_start, iterator_end);
			+ iterator_start	: Iterator chỉ đến phần tử đầu tiên trong dãy.
			+ iterator_end		: Iterator chỉ đến phần tử ngay sau phần tử cuối cùng trong dãy.
		- Đặc điểm: 
			+ Không ổn định: Nếu có hai phần tử có giá trị bằng nhau, thứ tự của chúng có thể bị thay đổi sau khi sắp xếp. Điều này có thể có tác động nếu bạn cần bảo toàn thứ tự của các phần tử có giá trị bằng nhau.
			+ Độ phức tạp thuật toán: O(n log n).
			+ Thuật toán dùng là Introselect là một sự kết hợp giữa Quicksort, Heapsort, và Insertion Sort (phần đa sử dụng là Quicksort, chỉ một số trường hợp xấu nhất mưới dùng tới Heapsort).
				. Nếu quicksort không hiệu quả (ví dụ, trong trường hợp dãy có quá nhiều phần tử trùng lặp hoặc đã gần như được sắp xếp), thuật toán sẽ chuyển sang sử dụng heapsort hoặc insertion sort để đảm bảo độ phức tạp O(n log n).
		- Ex: 
			+ Sắp xếp mặc định (tăng dần):
				std::vector<int> v = {3, 1, 4, 1, 5, 9};
				std::sort(v.begin(), v.end());
				// Kết quả: v = {1, 1, 3, 4, 5, 9}
				
			+ Sắp xếp theo thứ tự giảm dần:
				std::sort(v.begin(), v.end(), std::greater<int>());
				// Kết quả: v = {9, 5, 4, 3, 1, 1}
				
			+ Sắp xếp các đối tượng với hàm so sánh tùy chỉnh:
				struct Person {
					std::string name;
					int age;
				};

				bool compareByAge(const Person &a, const Person &b) {
					return a.age < b.age;
				}

				std::vector<Person> people = { {"Alice", 30}, {"Bob", 25}, {"Charlie", 35} };
				std::sort(people.begin(), people.end(), compareByAge);
				// Kết quả: people = { {"Bob", 25}, {"Alice", 30}, {"Charlie", 35} }
				
	2. stable_sort: cũng sắp xếp giống sort nhưng stable_sort sẽ mang tính ổn định cao hơn về mặt nếu có hai phần tử có giá trị bằng nhau thì thứ tự ban đầu của chúng trong container sẽ được bảo toàn sau khi sắp xếp.
		- Systax1: std::stable_sort(iterator_start, iterator_end);
			+ iterator_start: Iterator trỏ tới phần tử đầu tiên trong dãy cần sắp xếp.
			+ iterator_end: Iterator trỏ tới phần tử tiếp theo sau phần tử cuối cùng trong dãy cần sắp xếp.
			
		- Systax2: std::stable_sort(iterator_start, iterator_end, comparator);
			+ comparator: Hàm so sánh tùy chỉnh để sắp xếp các phần tử theo cách bạn mong muốn. Hàm so sánh này trả về true nếu phần tử đầu tiên cần xuất hiện trước phần tử thứ hai.
			
		- Đặc điểm:
			+ stable_sort sử dụng thuật toán mergesort với độ phức tạp là O(n log n).
		- Ex:
			+ sắp xếp tăng dần với phần tử có hai chỉ số:
				std::vector<std::pair<int, char>> v = {
					{4, 'd'}, {1, 'a'}, {4, 'b'}, {3, 'c'}, {2, 'e'}
				};
				// Sắp xếp tăng dần theo giá trị thứ nhất
				std::stable_sort(v.begin(), v.end());
				--> OUtput: (1, a) (2, e) (3, c) (4, d) (4, b)
			
	3. lower_bound : dùng để tìm vị trí cảu phần tử đầu tiên lớn hơn hoặc bằng trong một dãy đã được sắp xếp.
		- Systax: std::lower_bound(iterator_start, iterator_end, value);
			+ iterator_start	: Iterator trỏ tới phần tử đầu tiên trong dãy cần tìm kiếm.
			+ iterator_end		: Iterator trỏ tới phần tử tiếp theo sau phần tử cuối cùng trong dãy cần tìm kiếm.
			+ value				: Giá trị cần tìm kiếm trong dãy.
		- Trả về một iterator trỏ tới phần tử đầu tiên mà có giá trị không nhỏ hơn giá trị tìm kiếm, nếu không có sẽ trả về end().
		- Thuật tóan sẽ tìm giá trị bằng trước, nếu không có mới tìm tới giá trị lớn hơn.
		- Ex:
			std::vector<int> v = {1, 2, 4, 4, 5, 6, 7, 9, 10};
			// Tìm phần tử không nhỏ hơn 8
			auto it = std::lower_bound(v.begin(), v.end(), 8);
			--> Nếu có 8 sẽ trả về it tại 8 còn không sẽ là 9.
			
	4. upper_bound: dùng để tìm vị trí cảu phần tử đầu tiên lớn hơn trong một dãy đã được sắp xếp.
		- Systax: std::upper_bound(iterator_start, iterator_end, value);
			+ iterator_start	: Iterator trỏ tới phần tử đầu tiên trong dãy cần tìm kiếm.
			+ iterator_end		: Iterator trỏ tới phần tử tiếp theo sau phần tử cuối cùng trong dãy cần tìm kiếm.
			+ value				: Giá trị mà bạn muốn tìm kiếm.
		- Trả về một iterator trỏ tới phần tử đầu tiên mà có giá trị lớn hơn giá trị tìm kiếm, nếu không có sẽ trả về end().
		
	5. equal_range: dùng để tìm dải con chứa tất cả các phần tử bằng giá trị tìm kiếm trong một dãy đã được sắp xếp.
		- Tìm và trả về một cặp iterator đại diện cho dải con trong dãy đã sắp xếp mà chứa tất cả các phần tử có giá trị bằng với giá trị tìm kiếm.
		- Systax: std::equal_range(iterator_start, iterator_end, value);
			+ iterator_start	: Iterator trỏ tới phần tử đầu tiên trong dãy cần tìm kiếm.
			+ iterator_end		: Iterator trỏ tới phần tử tiếp theo sau phần tử cuối cùng trong dãy cần tìm kiếm (tức là end()).
			+ value				: Giá trị mà bạn muốn tìm trong dãy.
		- Trả về: Một cặp iterator (pair), trong đó:
			+ first	: Iterator trỏ tới phần tử đầu tiên có giá trị bằng value.
			+ second: Iterator trỏ tới phần tử sau phần tử cuối cùng có giá trị bằng value (tức là iterator đến vị trí sau phần tử cuối cùng có giá trị bằng value).
		- equal_range sử dụng tìm kiếm nhị phân để xác định dải con chứa tất cả các phần tử có giá trị bằng giá trị tìm kiếm trong dãy đã được sắp xếp. Độ phức tạp thời gian của nó là O(log n).
		- Kết quả trả về là một cặp iterator, trong đó iterator đầu tiên trỏ tới phần tử đầu tiên có giá trị bằng value, còn iterator thứ hai trỏ tới phần tử sau phần tử cuối cùng có giá trị bằng value. Nếu không tìm thấy giá trị trong dãy, cặp iterator sẽ có cả hai iterator trỏ tới end().
		- Ex:
			std::vector<int> v = {1, 2, 4, 5, 5, 4, 7};
			// Tìm dải con chứa tất cả các phần tử có giá trị bằng 4
			auto range = std::equal_range(v.begin(), v.end(), 4);
			--> Output: first = 4 - second = 5
			
	7. merge: dùng để hợp nhất hai dãy đã được sắp xếp vào một dãy thứ 3 sao cho kết quả của dãy mới vẫn giữ được thứ tự sắp xếp.
		- Systax: 	template <class InputIterator1, class InputIterator2, class OutputIterator>
					OutputIterator merge(InputIterator1 first1, InputIterator1 last1,
										 InputIterator2 first2, InputIterator2 last2,
										 OutputIterator d_first);
			+ first1, last1	: Đầu và cuối dãy đầu tiên (dãy thứ nhất), đã được sắp xếp theo thứ tự tăng dần.
			+ first2, last2	: Đầu và cuối dãy thứ hai (dãy thứ hai), cũng đã được sắp xếp theo thứ tự tăng dần.
			+ d_first		: Vị trí đầu tiên của dãy kết quả, nơi mà các phần tử hợp nhất từ first1 và first2 sẽ được sao chép.
		- Trả về một iterator trỏ tới ngay sau phần tử cuối cùng trong kết quả (là end)
		- Ex: 
			+ normal:
				std::vector<int> v1 = {1, 3, 5, 7};  // Dãy thứ nhất đã sắp xếp
				std::vector<int> v2 = {2, 4, 6, 8};  // Dãy thứ hai đã sắp xếp
				// Dãy kết quả, đủ lớn để chứa tất cả phần tử từ v1 và v2
				std::vector<int> result(v1.size() + v2.size());
				// Hợp nhất v1 và v2 vào result
				std::merge(v1.begin(), v1.end(), v2.begin(), v2.end(), result.begin());
				--> 1 2 3 4 5 6 7 8
					. std::merge sẽ so sánh phần tử đầu tiên của v1 với phần tử đầu tiên của v2. Sau đó, phần tử nhỏ hơn sẽ được sao chép vào dãy kết quả (result).
					. Quá trình này sẽ tiếp tục cho đến khi tất cả phần tử từ cả hai dãy đã được sao chép vào dãy kết quả.
					. Dãy kết quả sẽ luôn được sắp xếp tăng dần, vì chúng ta chỉ có thể "hợp nhất" các phần tử đã được sắp xếp.
				
			+ Tùy chỉnh tiêu chí so sánh với tham số thứ 5:
				bool compare(int a, int b) {
					return a > b;  // So sánh theo thứ tự giảm dần
				}
			
				std::vector<int> v1 = {1, 3, 5, 7};  // Dãy thứ nhất đã sắp xếp
				std::vector<int> v2 = {2, 4, 6, 8};  // Dãy thứ hai đã sắp xếp
				// Dãy kết quả, đủ lớn để chứa tất cả phần tử từ v1 và v2
				std::vector<int> result(v1.size() + v2.size());
				// Hợp nhất v1 và v2 vào result với tiêu chí so sánh giảm dần
				std::merge(v1.begin(), v1.end(), v2.begin(), v2.end(), result.begin(), compare);
				--> 8 7 6 5 4 3 2 1
				
	8. inplace_merge: được sử dụng để hợp nhất hai dãy đã sắp xếp lại với nhau trong cùng một không gian bộ nhớ mà không cần phải tạo ra một dãy thứ ba.
		- Systax: 	template <class BidirectionalIterator>
					void inplace_merge(BidirectionalIterator first, 
									   BidirectionalIterator middle, 
									   BidirectionalIterator last);
			+ first	: Iterator trỏ đến phần tử đầu tiên của dãy cần hợp nhất.
			+ middle: Iterator trỏ đến phần tử phân chia giữa hai nửa của dãy. Đây là điểm bắt đầu của dãy thứ hai.
			+ last	: Iterator trỏ đến phần tử cuối cùng của dãy.
		- Dãy từ first đến middle-1 và dãy từ middle đến last-1 đã được sắp xếp trước khi gọi inplace_merge. Thuật toán sẽ hợp nhất hai dãy này lại với nhau trong chính dãy ban đầu mà không cần phải cấp phát bộ nhớ mới.
		- Ex:
			std::vector<int> v = {1, 3, 5, 7, 2, 4, 6, 8};
			// Giả sử 2 phần của vector đã được sắp xếp
			std::inplace_merge(v.begin(), v.begin() + 4, v.end());
			--> 1 2 3 4 5 6 7 8
				. Dãy đã được sắp xếp ở hai phía: Dãy đầu tiên: {1, 3, 5, 7} và Dãy thứ hai: {2, 4, 6, 8}.
				
		- Dãy phải đã được sắp xếp: Dãy đầu vào phải được sắp xếp trước khi sử dụng inplace_merge. Nếu không, kết quả hợp nhất sẽ không đúng.
		- std::inplace_merge chỉ có thể sử dụng được với các dãy Bidirectional Iterator (như std::vector, std::list, v.v.).
		- inplace_merge cũng có thể thêm một tham số thứ 4 để có thể điều chỉnh dãy sẽ xếp theo tăng dần hay giảm dần.
		
	9. includes: dùng để kiểm tra xem một dãy đã được sắp xếp có chứa tất cả các phần tử của 1 dãy con khác(cũng đã đc sắp xếp) hay không 
		- Systax: 	template <class InputIterator1, class InputIterator2>
					bool includes(InputIterator1 first1, InputIterator1 last1,
								  InputIterator2 first2, InputIterator2 last2);
			+ first1, last1: Các iterator trỏ đến đầu và cuối dãy đầu tiên (dãy lớn hơn hoặc siêu tập hợp).
			+ first2, last2: Các iterator trỏ đến đầu và cuối dãy thứ hai (dãy con).
		- Trả về true nếu dãy đầu tiên chứa tất cả các phần tử của dãy thứ hai (theo thứ tự và số lượng tương ứng).
		- Trả về false nếu dãy đầu tiên không chứa tất cả các phần tử của dãy thứ hai.
		- Ex: 
			+ 
				std::vector<int> v1 = {1, 2, 3, 4, 5};
				std::vector<int> v2 = {2, 3, 4};
				// Kiểm tra xem v1 có chứa tất cả phần tử của v2 không
				if (std::includes(v1.begin(), v1.end(), v2.begin(), v2.end())) {
					std::cout << "v1 contains all elements of v2." << std::endl;
				}
				. Lưu ý rằng cả hai phải tập hợp phải được sắp xếp theo thứ tự nhất quán.
		
			+ Còn cách thêm một tham số nữa để thay đổi cách so sánh thay vì mặc định so sánh bằng toán tử < , lưu ý rằng cả hai dãy so sánh cần đúng theo thứ tự trong hàm comp
				std::vector<int> v1 = {5, 4, 3, 2, 1};
				std::vector<int> v2 = {4, 2};
				// Kiểm tra xem v2 có phải là con của v1 theo thứ tự giảm dần không
				if (std::includes(v1.begin(), v1.end(), v2.begin(), v2.end(), std::greater<int>())) {
					std::cout << "v2 là con của v1 theo thứ tự giảm dần.\n";
				}
				. Bạn có thể sử dụng bất kỳ hàm so sánh nào, miễn là nó thỏa mãn kiểu bool comp(const T& a, const T& b).
				
	10. set_union: dùng để tích hợp của hai tập hợp set đã được sắp xếp. Nó sẽ trả về một tập hợp mới chứa tất cả phần tử từ hai tập hợp đầu vào mà không có phần tử trùng lặp.
		- Systax: std::set_union(first1, last1, first2, last2, result)
			+ first1, last1	: Là các iterator chỉ đến đầu và cuối của dãy đầu tiên.
			+ first2, last2	: Là các iterator chỉ đến đầu và cuối của dãy thứ hai.
			+ result		: Là iterator chỉ đến nơi lưu kết quả hợp của hai tập hợp.
		- Ex: 
			+ normal:
				std::vector<int> vec1 = {1, 3, 5, 7};
				std::vector<int> vec2 = {2, 3, 6, 7, 8};
				std::vector<int> result;
				std::set_union(vec1.begin(), vec1.end(), vec2.begin(), vec2.end(), result);
				. Cũng có thể kết hợp với comp để thay đổi lại cách sắp xếp.
				
	11. set_intersection: dùng để tính giao của hai tập hợp đã được sắp xếp, thuật toán này trả về một tập hợp mới chứa tất cả các phần tử xuất hiện trong cả hai tập hợp đầu vào.
		- Systax: 	std::set_intersection(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, OutputIterator result);
			+ first1, last1	: Iterators chỉ tới đầu và cuối của dãy đầu tiên (set1).
			+ first2, last2	: Iterators chỉ tới đầu và cuối của dãy thứ hai (set2).
			+ result		: Là iterator chỉ tới vị trí đầu của dãy nơi kết quả giao sẽ được lưu trữ.
		- Ex:
			+ normal:
				// Hai tập hợp ban đầu
				std::set<int> set1 = {1, 3, 5, 7};
				std::set<int> set2 = {2, 3, 6, 7, 8};
				// Kết quả sẽ được lưu ở đây
				std::set<int> result;
				// Thực hiện set_intersection
				std::set_intersection(set1.begin(), set1.end(),
									  set2.begin(), set2.end(),
									  std::inserter(result, result.begin()));
				. set_intersection sẽ cần một std::inserter để lưu vào set hoặc std::back_inserter để lưu vào vector hoặc các container khác.
				
